{
  "info": {
    "name": "Task Manager API Collection",
    "description": "Complete collection for testing Task Manager CRUD operations with Node.js and Express.js",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "task-manager-api-collection",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "auth": {
    "type": "noauth"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "task_id",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Create Tasks",
      "item": [
        {
          "name": "Create Task - To Do",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has task object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('task');",
                  "    pm.expect(jsonData.task).to.have.property('id');",
                  "    pm.expect(jsonData.task).to.have.property('title');",
                  "    pm.expect(jsonData.task).to.have.property('status');",
                  "});",
                  "",
                  "pm.test(\"Task created with correct data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.task.title).to.eql(\"Buy groceries\");",
                  "    pm.expect(jsonData.task.status).to.eql(\"To Do\");",
                  "});",
                  "",
                  "// Save task ID for future requests",
                  "if (pm.response.code === 201) {",
                  "    var responseJson = pm.response.json();",
                  "    pm.collectionVariables.set(\"task_id\", responseJson.task.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Buy groceries\",\n  \"description\": \"Buy milk, bread, eggs, and fruits from the supermarket\",\n  \"status\": \"To Do\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Task - In Progress",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Task created with In Progress status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.task.status).to.eql(\"In Progress\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Review code\",\n  \"description\": \"Review the task manager API code for best practices\",\n  \"status\": \"In Progress\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Task - Completed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Task created with Completed status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.task.status).to.eql(\"Completed\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Setup development environment\",\n  \"description\": \"Install Node.js, npm, and configure the project\",\n  \"status\": \"Completed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Task - Default Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Task created with default To Do status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.task.status).to.eql(\"To Do\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Write documentation\",\n  \"description\": \"Create comprehensive API documentation\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Read Tasks",
      "item": [
        {
          "name": "Get All Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Tasks have required properties\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('title');",
                  "        pm.expect(jsonData[0]).to.have.property('description');",
                  "        pm.expect(jsonData[0]).to.have.property('status');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Task by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is a single task object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/{{task_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "{{task_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. Search & Filter Tasks",
      "item": [
        {
          "name": "Search Tasks by Title",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Search results contain query term\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        var containsQuery = jsonData.some(task => ",
                  "            task.title.toLowerCase().includes('buy') || ",
                  "            task.description.toLowerCase().includes('buy')",
                  "        );",
                  "        pm.expect(containsQuery).to.be.true;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/search?query=buy",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "buy"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search Tasks by Description",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/search?query=code",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "code"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search Tasks - Case Insensitive",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Case insensitive search works\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/search?query=REVIEW",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "REVIEW"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "4. Update Tasks",
      "item": [
        {
          "name": "Update Task Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('task');",
                  "    pm.expect(jsonData.task.status).to.eql(\"In Progress\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Buy groceries\",\n  \"description\": \"Buy milk, bread, eggs, and fruits from the supermarket\",\n  \"status\": \"In Progress\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks/{{task_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "{{task_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Task Title and Description",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task title and description updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.task.title).to.eql(\"Buy groceries and household items\");",
                  "    pm.expect(jsonData.task.description).to.include(\"cleaning supplies\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Buy groceries and household items\",\n  \"description\": \"Buy milk, bread, eggs, fruits, and cleaning supplies from the supermarket\",\n  \"status\": \"In Progress\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks/{{task_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "{{task_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Mark Task as Completed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task marked as completed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.task.status).to.eql(\"Completed\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Buy groceries and household items\",\n  \"description\": \"Buy milk, bread, eggs, fruits, and cleaning supplies from the supermarket\",\n  \"status\": \"Completed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks/{{task_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "{{task_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Partial Update - Status Only",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Only status updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.task.status).to.eql(\"To Do\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"To Do\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks/2",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "2"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "5. Delete Tasks",
      "item": [
        {
          "name": "Delete Task by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task deleted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('deleted successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/3",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "3"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "6. Error Handling Tests",
      "item": [
        {
          "name": "Create Task - Missing Title",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message for missing title\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('title is required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Task without title\",\n  \"status\": \"To Do\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Task - Invalid Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message for invalid status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('Status must be one of');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Task\",\n  \"description\": \"Task with invalid status\",\n  \"status\": \"Invalid Status\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Non-existent Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message for task not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('Task not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/999",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "999"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Non-existent Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message for task not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('Task not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Task\",\n  \"status\": \"Completed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks/999",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "999"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Non-existent Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message for task not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.include('Task not found');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/999",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "999"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search Without Query Parameter",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message for missing query\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('Query parameter is required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/search",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "search"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "7. Complete Workflow Test",
      "item": [
        {
          "name": "1. Create Multiple Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Workout session\",\n  \"description\": \"30 minutes cardio and strength training\",\n  \"status\": \"To Do\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks"
              ]
            }
          },
          "response": []
        },
        {
          "name": "2. View All Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Multiple tasks exist\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks"
              ]
            }
          },
          "response": []
        },
        {
          "name": "3. Search for Specific Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search returns relevant results\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/search?query=workout",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "workout"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "4. Update Task Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Workout session\",\n  \"description\": \"30 minutes cardio and strength training\",\n  \"status\": \"Completed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/tasks/1",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "1"
              ]
            }
          },
          "response": []
        },
        {
          "name": "5. Verify Task Update",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task status updated to Completed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"Completed\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/tasks/1",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "tasks",
                "1"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
